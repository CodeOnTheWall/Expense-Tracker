{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Btrader\\\\Documents\\\\practice\\\\expense-tracker-mern\\\\frontend\\\\src\\\\components\\\\UI\\\\Input\\\\input.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useImperativeHandle } from \"react\";\n// we need useImperativeHandler for very few situations, one is to call refs in other files\n\nimport classes from \"./Input.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Input = /*#__PURE__*/_s( /*#__PURE__*/React.forwardRef(_c = _s((props, ref) => {\n  _s();\n  // because we are passing props directly from Login.js to here, we dont need useContext\n  // forwardRef allows us to pass this component function, and be bound to a ref\n\n  const inputRef = useRef();\n  const activate = () => {\n    inputRef.current.focus();\n  };\n  useImperativeHandle(ref, () => {\n    return {\n      focus: activate\n      // activate refers to the function activate\n      // focus is now externally available now\n    };\n  });\n\n  // div className={classes[\"new-expense\"]}\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${props.className} ${props.isValid === false ? classes.invalid : \"\"\n    // if truthy, give this div classes.invalid, if falsy (otherwise) do nothing\n    // isValid is prop from emailIsValid which already points to an isValid emailState, hence give this class of invalid\n    }`,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id,\n      children: props.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      type: props.type,\n      id: props.id,\n      value: props.value\n      // this is our 2 way binding - resets form field after\n      ,\n      onChange: props.onChange,\n      onBlur: props.onBlur\n      // onBlur event occurs when an object loses focus\n      ,\n      min: props.min,\n      step: props.step,\n      max: props.max\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}, \"Ag7bjDUBywlCYPNfrolbitV68Mw=\")), \"Ag7bjDUBywlCYPNfrolbitV68Mw=\");\n_c2 = Input;\nexport default Input;\nvar _c, _c2;\n$RefreshReg$(_c, \"Input$React.forwardRef\");\n$RefreshReg$(_c2, \"Input\");","map":{"version":3,"names":["React","useRef","useImperativeHandle","classes","Input","forwardRef","props","ref","inputRef","activate","current","focus","className","isValid","invalid","id","type","value","onChange","onBlur","min","step","max"],"sources":["C:/Users/Btrader/Documents/practice/expense-tracker-mern/frontend/src/components/UI/Input/input.js"],"sourcesContent":["import React, { useRef, useImperativeHandle } from \"react\";\r\n// we need useImperativeHandler for very few situations, one is to call refs in other files\r\n\r\nimport classes from \"./Input.module.css\";\r\n\r\nconst Input = React.forwardRef((props, ref) => {\r\n  // because we are passing props directly from Login.js to here, we dont need useContext\r\n  // forwardRef allows us to pass this component function, and be bound to a ref\r\n\r\n  const inputRef = useRef();\r\n\r\n  const activate = () => {\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      focus: activate,\r\n      // activate refers to the function activate\r\n      // focus is now externally available now\r\n    };\r\n  });\r\n\r\n  // div className={classes[\"new-expense\"]}\r\n\r\n  return (\r\n    <div\r\n      className={`${props.className} ${\r\n        props.isValid === false ? classes.invalid : \"\"\r\n        // if truthy, give this div classes.invalid, if falsy (otherwise) do nothing\r\n        // isValid is prop from emailIsValid which already points to an isValid emailState, hence give this class of invalid\r\n      }`}\r\n    >\r\n      <label htmlFor={props.id}>{props.id}</label>\r\n      <input\r\n        ref={inputRef}\r\n        type={props.type}\r\n        id={props.id}\r\n        value={props.value}\r\n        // this is our 2 way binding - resets form field after\r\n        onChange={props.onChange}\r\n        onBlur={props.onBlur}\r\n        // onBlur event occurs when an object loses focus\r\n        min={props.min}\r\n        step={props.step}\r\n        max={props.max}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Input;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,mBAAmB,QAAQ,OAAO;AAC1D;;AAEA,OAAOC,OAAO,MAAM,oBAAoB;AAAC;AAEzC,MAAMC,KAAK,iCAAGJ,KAAK,CAACK,UAAU,SAAC,CAACC,KAAK,EAAEC,GAAG,KAAK;EAAA;EAC7C;EACA;;EAEA,MAAMC,QAAQ,GAAGP,MAAM,EAAE;EAEzB,MAAMQ,QAAQ,GAAG,MAAM;IACrBD,QAAQ,CAACE,OAAO,CAACC,KAAK,EAAE;EAC1B,CAAC;EAEDT,mBAAmB,CAACK,GAAG,EAAE,MAAM;IAC7B,OAAO;MACLI,KAAK,EAAEF;MACP;MACA;IACF,CAAC;EACH,CAAC,CAAC;;EAEF;;EAEA,oBACE;IACE,SAAS,EAAG,GAAEH,KAAK,CAACM,SAAU,IAC5BN,KAAK,CAACO,OAAO,KAAK,KAAK,GAAGV,OAAO,CAACW,OAAO,GAAG;IAC5C;IACA;IACD,EAAE;IAAA,wBAEH;MAAO,OAAO,EAAER,KAAK,CAACS,EAAG;MAAA,UAAET,KAAK,CAACS;IAAE;MAAA;MAAA;MAAA;IAAA,QAAS,eAC5C;MACE,GAAG,EAAEP,QAAS;MACd,IAAI,EAAEF,KAAK,CAACU,IAAK;MACjB,EAAE,EAAEV,KAAK,CAACS,EAAG;MACb,KAAK,EAAET,KAAK,CAACW;MACb;MAAA;MACA,QAAQ,EAAEX,KAAK,CAACY,QAAS;MACzB,MAAM,EAAEZ,KAAK,CAACa;MACd;MAAA;MACA,GAAG,EAAEb,KAAK,CAACc,GAAI;MACf,IAAI,EAAEd,KAAK,CAACe,IAAK;MACjB,GAAG,EAAEf,KAAK,CAACgB;IAAI;MAAA;MAAA;MAAA;IAAA,QACf;EAAA;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC,kCAAC;AAAC,MA5CGlB,KAAK;AA8CX,eAAeA,KAAK;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module"}