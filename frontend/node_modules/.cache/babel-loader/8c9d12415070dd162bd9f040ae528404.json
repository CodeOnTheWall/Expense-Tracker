{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport { setupListeners } from \"@reduxjs/toolkit/dist/query\";\nimport { apiSlice } from \"./api/apiSlice\";\nimport authReducer from \"../features/auth/authSlice\";\nexport const store = configureStore({\n  reducer: {\n    // rtkq required\n    // all apiSlices in their respective files inject endpoints into apiSlice (that interact with api)\n    // other slices for regular store, are added below that dont interact with api\n    // such as authReducer\n    [apiSlice.reducerPath]: apiSlice.reducer,\n    auth: authReducer\n  },\n  // Adding the api middleware enables caching, invalidation, polling,\n\n  // This middleware intercepts all dispatched actions that are defined as an RTK\n  // Query endpoint (in the endpoints property of createApi) and handles them. The\n  // middleware will use the baseQuery object you passed to createApi as the default\n  // configuration for all network requests made by the RTK Query endpoints.\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(apiSlice.middleware),\n  // to be able to use redux devTools\n  devTools: true\n});\n\n// optional, but required for refetchOnFocus/refetchOnReconnect behaviors\nsetupListeners(store.dispatch);","map":{"version":3,"names":["configureStore","setupListeners","apiSlice","authReducer","store","reducer","reducerPath","auth","middleware","getDefaultMiddleware","concat","devTools","dispatch"],"sources":["C:/Users/Btrader/Documents/practice/expense-tracker-mern/frontend/src/app/store.js"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { setupListeners } from \"@reduxjs/toolkit/dist/query\";\r\n\r\nimport { apiSlice } from \"./api/apiSlice\";\r\nimport authReducer from \"../features/auth/authSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    // rtkq required\r\n    // all apiSlices in their respective files inject endpoints into apiSlice (that interact with api)\r\n    // other slices for regular store, are added below that dont interact with api\r\n    // such as authReducer\r\n    [apiSlice.reducerPath]: apiSlice.reducer,\r\n    auth: authReducer,\r\n  },\r\n  // Adding the api middleware enables caching, invalidation, polling,\r\n\r\n  // This middleware intercepts all dispatched actions that are defined as an RTK\r\n  // Query endpoint (in the endpoints property of createApi) and handles them. The\r\n  // middleware will use the baseQuery object you passed to createApi as the default\r\n  // configuration for all network requests made by the RTK Query endpoints.\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(apiSlice.middleware),\r\n  // to be able to use redux devTools\r\n  devTools: true,\r\n});\r\n\r\n// optional, but required for refetchOnFocus/refetchOnReconnect behaviors\r\nsetupListeners(store.dispatch);\r\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,cAAc,QAAQ,6BAA6B;AAE5D,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,OAAOC,WAAW,MAAM,4BAA4B;AAEpD,OAAO,MAAMC,KAAK,GAAGJ,cAAc,CAAC;EAClCK,OAAO,EAAE;IACP;IACA;IACA;IACA;IACA,CAACH,QAAQ,CAACI,WAAW,GAAGJ,QAAQ,CAACG,OAAO;IACxCE,IAAI,EAAEJ;EACR,CAAC;EACD;;EAEA;EACA;EACA;EACA;EACAK,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,EAAE,CAACC,MAAM,CAACR,QAAQ,CAACM,UAAU,CAAC;EACpD;EACAG,QAAQ,EAAE;AACZ,CAAC,CAAC;;AAEF;AACAV,cAAc,CAACG,KAAK,CAACQ,QAAQ,CAAC"},"metadata":{},"sourceType":"module"}