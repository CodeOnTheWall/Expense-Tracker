{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\n\n// entity adapter comes with pre gen reducer functions like addOne, setOne, setMany, removeOne etc (for CRUD)\n// also comes with pre set selectors (getSelector) to read contents of entity state object, like selectIds, selectAll etc etc\nconst usersAdapter = createEntityAdapter({});\n\n// getInitialState() is a method provided by the createEntityAdapter function that returns an initial state object for the normalized data. It creates an empty\n// state object with properties ids and entities that are used to store the ids and the entities of the normalized data.\nconst initialState = usersAdapter.getInitialState();\n\n// injecting/adding endpoints into the apiSlice\nexport const usersApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    // methods (getUsers, addNewUser etc)\n    getUsers: builder.query({\n      // /users is an endpoint to make req on\n      query: () => ({\n        url: \"/users\",\n        validateStatus: (response, result) => {\n          return response.status === 200 && !result.isError;\n        }\n      }),\n      //  transforming the response from query (calling it responseData)\n      transformResponse: responseData => {\n        const loadedUsers = responseData.map(user => {\n          // the normalized data via the usersAdapter looks for an id property, not _id (mongo id syntax), hence have to format it here\n          // so giving each mapped user a user.id (which is the mongodb user._id)\n          user.id = user._id;\n          return user;\n        });\n        // setting the initialState to have the loadedUsers (now loadedUsers data is inside initialState with a format of ids and entities). now we can use\n        // the usersAdapters reducer funcs and selectors mentioned above on the initialState data\n        return usersAdapter.setAll(initialState, loadedUsers);\n      },\n      // providing tags here to be invalidated in the mutated methods for re-fetching of data\n      // id: \"LIST\" indicates the data returned from endpoint is complete list of users, good for invalidating after deletion or adding, as whole list would change\n      // also mapping over the ids of each user, so each user will have tag type: \"User\", and an id, good for updating\n\n      // result is data returned from endpoint (getUsers), arg is the arg passed when we call the query, we want dynamically set id tags,\n      // so only the individual thing is re fetched, not everything, improves performance\n      providesTags: (result, error, arg) => {\n        // console.log(result);\n        // could get a result that doesnt have an id, hence the else return\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: \"User\",\n            id: \"LIST\"\n          },\n          // to invalidate a single id for caching and re-fetching (each user will have tag type User, and an id) - improves performance\n          ...result.ids.map(id => ({\n            type: \"User\",\n            id\n          }))];\n        } else return [{\n          type: \"User\",\n          id: \"LIST\"\n        }];\n      }\n    }),\n    addNewUser: builder.mutation({\n      query: initialUserData => ({\n        url: \"/users\",\n        method: \"POST\",\n        // body is what is sent to backend, backend access req.body\n        body: {\n          ...initialUserData\n        }\n      }),\n      // user list cache will be invalidated and be re fetched\n      invalidatesTags: [{\n        type: \"User\",\n        id: \"LIST\"\n      }]\n    }),\n    updateUser: builder.mutation({\n      query: initialUserData => ({\n        url: \"/users\",\n        method: \"PATCH\",\n        body: {\n          ...initialUserData\n        }\n      }),\n      // only invalidating the id of the user to be re fetched (arg is the initialUserData passed in)\n      invalidatesTags: (result, error, arg) => [{\n        type: \"User\",\n        id: arg.id\n      }]\n    }),\n    deleteUser: builder.mutation({\n      // only need the id here destructured from data sent in\n      query: _ref => {\n        let {\n          id\n        } = _ref;\n        return {\n          url: `/users`,\n          method: \"DELETE\",\n          body: {\n            id\n          }\n        };\n      },\n      // arg is id passed in\n      invalidatesTags: (result, error, arg) => [{\n        type: \"User\",\n        id: arg.id\n      }]\n    })\n  })\n});\n\n// hooks auto created, just add use[insertMethod]Query/Mutation\nexport const {\n  useGetUsersQuery,\n  useAddNewUserMutation,\n  useUpdateUserMutation,\n  useDeleteUserMutation\n} = usersApiSlice;\n\n// select() method returns the query result object chosen, in this case, the data from getUsers (transformed data goes into the usersAdapter)\nexport const selectUsersResult = usersApiSlice.endpoints.getUsers.select();\n\n// Creates memoized selector. createSelector recieves input funcs(s) and then has an output func, so here input func being passed in is selectUsersResult query\n// memoizing the query result object (selectUsersResult)\n// memoization optimizes performance by only doing work if inputs have changed, and consistently returning the same result references if the inputs are the same.\n// i.e, if getUsers result hasnt changed, wont re fetch\nconst selectUsersData = createSelector(selectUsersResult,\n// normalized state object with ids & entities\nusersResult => usersResult.data);\nexport const {\n  // maps over the state.ids array, and returns an array of entities in the same order.\n  selectAll: selectAllUsers,\n  selectById: selectUserById,\n  // returns the state.ids array.\n  selectIds: selectUserIds\n  // the entity adapter (which is usersAdapter) contains a getSelector func that returns a set of selectors to read contents of entity state object\n  // this entity state object is the selectUsersData (since it returns usersResult.data)\n  // selectors that know how to read the contents of an entity state object, which is the state from selectUsersData below\n} = usersAdapter.getSelectors(\n// if null ?? load initialState\nstate => {\n  var _selectUsersData;\n  return (_selectUsersData = selectUsersData(state)) !== null && _selectUsersData !== void 0 ? _selectUsersData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","usersAdapter","initialState","getInitialState","usersApiSlice","injectEndpoints","endpoints","builder","getUsers","query","url","validateStatus","response","result","status","isError","transformResponse","responseData","loadedUsers","map","user","id","_id","setAll","providesTags","error","arg","ids","type","addNewUser","mutation","initialUserData","method","body","invalidatesTags","updateUser","deleteUser","useGetUsersQuery","useAddNewUserMutation","useUpdateUserMutation","useDeleteUserMutation","selectUsersResult","select","selectUsersData","usersResult","data","selectAll","selectAllUsers","selectById","selectUserById","selectIds","selectUserIds","getSelectors","state"],"sources":["C:/Users/Btrader/Documents/practice/expense-tracker-mern/frontend/src/features/users/usersApiSlice.js"],"sourcesContent":["import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\r\nimport { apiSlice } from \"../../app/api/apiSlice\";\r\n\r\n// entity adapter comes with pre gen reducer functions like addOne, setOne, setMany, removeOne etc (for CRUD)\r\n// also comes with pre set selectors (getSelector) to read contents of entity state object, like selectIds, selectAll etc etc\r\nconst usersAdapter = createEntityAdapter({});\r\n\r\n// getInitialState() is a method provided by the createEntityAdapter function that returns an initial state object for the normalized data. It creates an empty\r\n// state object with properties ids and entities that are used to store the ids and the entities of the normalized data.\r\nconst initialState = usersAdapter.getInitialState();\r\n\r\n// injecting/adding endpoints into the apiSlice\r\nexport const usersApiSlice = apiSlice.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    // methods (getUsers, addNewUser etc)\r\n    getUsers: builder.query({\r\n      // /users is an endpoint to make req on\r\n      query: () => ({\r\n        url: \"/users\",\r\n        validateStatus: (response, result) => {\r\n          return response.status === 200 && !result.isError;\r\n        },\r\n      }),\r\n      //  transforming the response from query (calling it responseData)\r\n      transformResponse: (responseData) => {\r\n        const loadedUsers = responseData.map((user) => {\r\n          // the normalized data via the usersAdapter looks for an id property, not _id (mongo id syntax), hence have to format it here\r\n          // so giving each mapped user a user.id (which is the mongodb user._id)\r\n          user.id = user._id;\r\n          return user;\r\n        });\r\n        // setting the initialState to have the loadedUsers (now loadedUsers data is inside initialState with a format of ids and entities). now we can use\r\n        // the usersAdapters reducer funcs and selectors mentioned above on the initialState data\r\n        return usersAdapter.setAll(initialState, loadedUsers);\r\n      },\r\n\r\n      // providing tags here to be invalidated in the mutated methods for re-fetching of data\r\n      // id: \"LIST\" indicates the data returned from endpoint is complete list of users, good for invalidating after deletion or adding, as whole list would change\r\n      // also mapping over the ids of each user, so each user will have tag type: \"User\", and an id, good for updating\r\n\r\n      // result is data returned from endpoint (getUsers), arg is the arg passed when we call the query, we want dynamically set id tags,\r\n      // so only the individual thing is re fetched, not everything, improves performance\r\n      providesTags: (result, error, arg) => {\r\n        // console.log(result);\r\n        // could get a result that doesnt have an id, hence the else return\r\n        if (result?.ids) {\r\n          return [\r\n            { type: \"User\", id: \"LIST\" },\r\n            // to invalidate a single id for caching and re-fetching (each user will have tag type User, and an id) - improves performance\r\n            ...result.ids.map((id) => ({ type: \"User\", id })),\r\n          ];\r\n        } else return [{ type: \"User\", id: \"LIST\" }];\r\n      },\r\n    }),\r\n\r\n    addNewUser: builder.mutation({\r\n      query: (initialUserData) => ({\r\n        url: \"/users\",\r\n        method: \"POST\",\r\n        // body is what is sent to backend, backend access req.body\r\n        body: {\r\n          ...initialUserData,\r\n        },\r\n      }),\r\n      // user list cache will be invalidated and be re fetched\r\n      invalidatesTags: [{ type: \"User\", id: \"LIST\" }],\r\n    }),\r\n\r\n    updateUser: builder.mutation({\r\n      query: (initialUserData) => ({\r\n        url: \"/users\",\r\n        method: \"PATCH\",\r\n        body: {\r\n          ...initialUserData,\r\n        },\r\n      }),\r\n      // only invalidating the id of the user to be re fetched (arg is the initialUserData passed in)\r\n      invalidatesTags: (result, error, arg) => [{ type: \"User\", id: arg.id }],\r\n    }),\r\n\r\n    deleteUser: builder.mutation({\r\n      // only need the id here destructured from data sent in\r\n      query: ({ id }) => ({\r\n        url: `/users`,\r\n        method: \"DELETE\",\r\n        body: { id },\r\n      }),\r\n      // arg is id passed in\r\n      invalidatesTags: (result, error, arg) => [{ type: \"User\", id: arg.id }],\r\n    }),\r\n  }),\r\n});\r\n\r\n// hooks auto created, just add use[insertMethod]Query/Mutation\r\nexport const {\r\n  useGetUsersQuery,\r\n  useAddNewUserMutation,\r\n  useUpdateUserMutation,\r\n  useDeleteUserMutation,\r\n} = usersApiSlice;\r\n\r\n// select() method returns the query result object chosen, in this case, the data from getUsers (transformed data goes into the usersAdapter)\r\nexport const selectUsersResult = usersApiSlice.endpoints.getUsers.select();\r\n\r\n// Creates memoized selector. createSelector recieves input funcs(s) and then has an output func, so here input func being passed in is selectUsersResult query\r\n// memoizing the query result object (selectUsersResult)\r\n// memoization optimizes performance by only doing work if inputs have changed, and consistently returning the same result references if the inputs are the same.\r\n// i.e, if getUsers result hasnt changed, wont re fetch\r\nconst selectUsersData = createSelector(\r\n  selectUsersResult,\r\n  // normalized state object with ids & entities\r\n  (usersResult) => usersResult.data\r\n);\r\n\r\nexport const {\r\n  // maps over the state.ids array, and returns an array of entities in the same order.\r\n  selectAll: selectAllUsers,\r\n  selectById: selectUserById,\r\n  // returns the state.ids array.\r\n  selectIds: selectUserIds,\r\n  // the entity adapter (which is usersAdapter) contains a getSelector func that returns a set of selectors to read contents of entity state object\r\n  // this entity state object is the selectUsersData (since it returns usersResult.data)\r\n  // selectors that know how to read the contents of an entity state object, which is the state from selectUsersData below\r\n} = usersAdapter.getSelectors(\r\n  // if null ?? load initialState\r\n  (state) => selectUsersData(state) ?? initialState\r\n);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}